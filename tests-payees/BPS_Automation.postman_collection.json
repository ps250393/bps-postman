{
	"info": {
		"_postman_id": "127615c7-5364-4d5a-8694-aabe91d67a22",
		"name": "BPS_Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Managed Payee -- FISERV",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "15e22dbf-7e3b-4ae7-ad57-a5f1ca7d41e4",
						"exec": [
							"pm.environment.set(\"ManagedPayee\", \"SPRINT WIRELESS\");",
							"pm.environment.set(\"Accountnum\", \"43565464565654\");",
							"pm.environment.set(\"phonenum\", \"8882114727\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65e67490-25a6-48e4-8859-d2c01a3c2549",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.name\", \"SPRINT WIRELESS\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"ACTIVE\");",
							"tests[\"Got Payees successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Payee');",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); ",
							"",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"//pm.environment.set(\"Payeeid\", convertedData.Success.Payee.id);",
							"var Payeeid = convertedData.Success.Payee.id._;",
							"console.log(Payeeid)",
							"",
							"// Assigning the extracted value in to a global variable",
							"pm.environment.set(\"Payeeid\", Payeeid);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Payee xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n<name>{{ManagedPayee}}</name>\n<nickname>{{ManagedPayee}}</nickname>\n<accountNumber>{{Accountnum}}</accountNumber>\n<address>\n<address1>20 Payee road</address1>\n<city>Norcroos</city>\n<state>GA</state>\n<country>US</country>\n<postalCode>30091</postalCode>\n</address>\n<phoneNumber>\n<number>{{phonenum}}</number>\n</phoneNumber>\n<emailAddress/>\n<categoryId idDomain=\"IPE\">103717</categoryId>\n<categoryName>uncategorized</categoryName>\n<merchantId idDomain=\"IPE\"/>\n<status>ACTIVE</status>\n<cutoffTime>15:00:00.000-07:00</cutoffTime>\n<leadDays>4</leadDays>\n<payeeType>MANAGED</payeeType>\n</Payee>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPayees",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Payees.Payee.length] = true;",
							"tests[\"Got Payees successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Payees\"] = pm.expect(pm.response.text()).to.include('Payees');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Payee');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Add UnManaged Payee -- FISERV",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "93f6dca4-20fd-43e7-85c0-049241a88862",
						"exec": [
							"pm.environment.set(\"UnManagedPayee\", \"TestPayee\");",
							"pm.environment.set(\"Accountnum\", \"12345678910\");",
							"pm.environment.set(\"phonenum\", \"8689558833\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "483ac3b9-5bca-4bbf-b5ab-8d1a687a19c9",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.name\", \"TestPayee\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"ACTIVE\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.payeeType\", \"UNMANAGED\");",
							"tests[\"Got Payees successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Payee');",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); ",
							"",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Payee xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n<name>{{UnManagedPayee}}</name>\n<nickname>{{UnManagedPayee}}</nickname>\n<accountNumber>{{Accountnum}}</accountNumber>\n<address>\n<address1>20 Payee road</address1>\n<city>Norcroos</city>\n<state>GA</state>\n<country>US</country>\n<postalCode>30091</postalCode>\n</address>\n<phoneNumber>\n<number>{{phonenum}}</number>\n</phoneNumber>\n<emailAddress/>\n<categoryId idDomain=\"IPE\">103717</categoryId>\n<categoryName>uncategorized</categoryName>\n<merchantId idDomain=\"IPE\"/>\n<status>ACTIVE</status>\n<cutoffTime>15:00:00.000-07:00</cutoffTime>\n<leadDays>4</leadDays>\n<payeeType>UNMANAGED</payeeType>\n</Payee>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPayee - Single Payee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f7f486b-2b9b-460c-b804-e83a7def6fe5",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Got Payee successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.name\", \"SPRINT WIRELESS\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"ACTIVE\");",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee/{{Payeeid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee",
						"{{Payeeid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Edit Managed Payee -- FISERV",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "15e22dbf-7e3b-4ae7-ad57-a5f1ca7d41e4",
						"exec": [
							"pm.environment.set(\"ManagedPayee\", \"SPRINT WIRELESS\");",
							"pm.environment.set(\"Accountnum\", \"43565464565654\");",
							"pm.environment.set(\"phonenum\", \"8882114727\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65e67490-25a6-48e4-8859-d2c01a3c2549",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.name\", \"SPRINT WIRELESS Update\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"ACTIVE\");",
							"tests[\"Got Payees successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Payee');",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); ",
							"",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-app-token=\"\",intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\",intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "1038104",
						"type": "text"
					},
					{
						"key": "intuit-subscriber",
						"value": "",
						"type": "text"
					},
					{
						"key": "intuit_offeringid",
						"value": "BPUI",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Payee xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n    <Payee>\n        <id idDomain=\"IPE\">44629</id>\n        <revision>3</revision>\n        <metaData>\n            <createdTime>2019-12-29T18:00:06.606-08:00</createdTime>\n            <lastUpdatedTime>2019-12-29T18:03:53.374-08:00</lastUpdatedTime>\n        </metaData>\n        <name>{{ManagedPayee}} Update</name>\n        <nickname>{{ManagedPayee}} Update</nickname>\n        <accountNumber>****5654</accountNumber>\n        <address>\n            <address1>20 Payee road</address1>\n            <city>Norcroos</city>\n            <state>GA</state>\n            <country>US</country>\n            <postalCode>30091</postalCode>\n        </address>\n        <phoneNumber>\n            <number>{{phonenum}}</number>\n        </phoneNumber>\n        <emailAddress/>\n        <categoryId idDomain=\"IPE\">103717</categoryId>\n        <categoryName>Uncategorized</categoryName>\n        <merchantId idDomain=\"IPE\"/>\n        <status>ACTIVE</status>\n        <cutoffTime>20:59:00.000-08:00</cutoffTime>\n        <leadDays>6</leadDays>\n        <supportExpeditedPayment>true</supportExpeditedPayment>\n        <payeeType>UNMANAGED</payeeType>\n        <eBillStatus>NOT_AVAILABLE</eBillStatus>\n        <trialPeriod>false</trialPeriod>\n        <lastPaidAmount/>\n    </Payee>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete- Single Payee",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Payee.length] = true;",
							"tests[\"Payee Deleted successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.name\", \"SPRINT WIRELESS\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"DELETED\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payee.status\", \"UNMANAGED\");",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payee/{{Payeeid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payee",
						"{{Payeeid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get Payments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Payments.Payment.length] = true;",
							"tests[\"Got Payments successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify amount\"] = pm.expect(pm.response.text()).to.include('amount');",
							"tests[\"Verify date\"] = pm.expect(pm.response.text()).to.include('date');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payment",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payment"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Post Single Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Posted Payment successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify amount\"] = pm.expect(pm.response.text()).to.include('amount');",
							"tests[\"Verify date\"] = pm.expect(pm.response.text()).to.include('date');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.accountName\", \"Personal Checking\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.status\", \"SCHEDULED\");",
							"var Paymentid = convertedData.Success.Payment.id._;",
							"var PayConfirmation = convertedData.Success.Payment.confirmationNumber;",
							"console.log(PayConfirmation)",
							"console.log(Paymentid)",
							"",
							"// Assigning the extracted value in to a global variable",
							"pm.environment.set(\"Paymentid\", Paymentid);",
							"pm.environment.set(\"PayConfirmation\", PayConfirmation);",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "bbs_realm_id",
						"type": "text",
						"value": "{{realmid}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Payment xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n        <date>{{PaymentDate}}</date>\n        <amount>\n            <currencyCode>USD</currencyCode>\n            <amount>10.00</amount>\n        </amount>\n        <accountId idDomain=\"IPE\">43234</accountId>\n        <accountName>Personal Checking</accountName>\n        <accountNickname>Personal Checking</accountNickname>\n        <status>SCHEDULED</status>\n        <expectedDeliveryDate>2020-01-28</expectedDeliveryDate>\n        <payeeId idDomain=\"IPE\">{{Payeeid}}</payeeId>\n        <payeeName>{{ManagedPayee}}</payeeName>\n        <payeeNickname>{{ManagedPayee}}</payeeNickname>\n        <payeeAccountNumber>{{Accountnum}}</payeeAccountNumber>\n        <deliveryMethod>TRUST_CHECK</deliveryMethod>\n        <categoryId idDomain=\"IPE\">103733</categoryId>\n        <categoryName>uncategorized</categoryName>\n        <autoPayment>true</autoPayment>\n        <address>\n            <address1>20 Payee road</address1>\n            <city>Norcroos</city>\n            <state>GA</state>\n            <country>US</country>\n            <postalCode>30091</postalCode>\n        </address>\n        <paymentRuleId idDomain=\"IPE\">20253</paymentRuleId>\n    </Payment>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payment/",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payment",
						""
					]
				},
				"description": "This test is to post a payment"
			},
			"response": []
		},
		{
			"name": "Get Single Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Payment.length] = true;",
							"tests[\"Got Payment successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify amount\"] = pm.expect(pm.response.text()).to.include('amount');",
							"tests[\"Verify date\"] = pm.expect(pm.response.text()).to.include('date');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.amount.amount\", \"10\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.status\", \"SCHEDULED\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.expectedDeliveryDate\", pm.environment.get(\"PaymentDate\"));",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.payeeName\", \"ManagePayee\");",
							"",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "bbs_realm_id",
						"type": "text",
						"value": "{{realmid}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payment/{{Paymentid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payment",
						"{{Paymentid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Modify Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Posted Payment successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify amount\"] = pm.expect(pm.response.text()).to.include('amount');",
							"tests[\"Verify date\"] = pm.expect(pm.response.text()).to.include('date');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.accountName\", \"Personal Checking\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.status\", \"SCHEDULED\");",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "55c11b04-1f44-4071-bf24-d70e8e9c0c04",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "bbs_realm_id",
						"type": "text",
						"value": "{{realmid}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Payment xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n        <id idDomain=\"IPE\">{{Paymentid}}</id>\n        <revision>2</revision>\n        <date>{{PaymentDate}}</date>\n        <amount>\n            <currencyCode>USD</currencyCode>\n            <amount>20.00</amount>\n        </amount>\n        <accountId idDomain=\"IPE\">43234</accountId>\n        <accountName>Personal Checking</accountName>\n        <accountNickname>Personal Checking</accountNickname>\n        <status>SCHEDULED</status>\n        <expectedDeliveryDate>2020-01-28</expectedDeliveryDate>\n        <payeeId idDomain=\"IPE\">{{Payeeid}}</payeeId>\n        <payeeName>{{ManagedPayee}}</payeeName>\n        <payeeNickname>{{ManagedPayee}}</payeeNickname>\n        <payeeAccountNumber>{{Accountnum}}</payeeAccountNumber>\n        <deliveryMethod>TRUST_CHECK</deliveryMethod>\n        <categoryId idDomain=\"IPE\">103733</categoryId>\n        <categoryName>uncategorized</categoryName>\n        <autoPayment>true</autoPayment>\n        <address>\n            <address1>20 Payee road</address1>\n            <city>Norcroos</city>\n            <state>GA</state>\n            <country>US</country>\n            <postalCode>30091</postalCode>\n        </address>\n        <paymentRuleId idDomain=\"IPE\">20253</paymentRuleId>\n    </Payment>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payment/",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payment",
						""
					]
				},
				"description": "This test is to post a payment"
			},
			"response": []
		},
		{
			"name": "Delete- Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Payee.length] = true;",
							"tests[\"Payment Deleted successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.amount\", \"20\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.accountName\", \"Personal Checking\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.status\", \"CANCELED\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.date\", pm.environment.get(\"PaymentDate\"));",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.confirmationNumber\", pm.environment.get(\"PayConfirmation\"));",
							"expectResponseBodyToHaveJsonProperty(\"Success.Payment.payeeName\", pm.environment.get(\"ManagedPayee\"));",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/payment/{{Paymentid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"payment",
						"{{Paymentid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Add Funding Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0675bed4-3163-4195-b9d1-cc446eb05070",
						"exec": [
							"pm.environment.set(\"FundingAccount\", \"Test Checking\");",
							"pm.environment.set(\"FundingActnum\", \"54654356546546\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "416c81eb-a359-4064-bfc4-b1a88882ecef",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Added Funding account successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.name\",pm.environment.get(\"FundingAccount\") );",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.routingNumber\", \"323075754\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.status\", \"APPROVED\");",
							"var FundingAccountid = convertedData.Success.Account.id._;",
							"console.log(FundingAccountid)",
							"",
							"// Assigning the extracted value in to a global variable",
							"pm.environment.set(\"FundingAccountid\", FundingAccountid);",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Account xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n<name>{{FundingAccount}}</name>\n<nickname>{{FundingAccount}}</nickname>\n<bankName>The Pacific Northwest</bankName>\n<default>false</default>\n<accountNumber>{{FundingActnum}}</accountNumber>\n<routingNumber>323075754</routingNumber>\n<bankAccountType>CHECKING</bankAccountType>\n<validate>false</validate>\n</Account>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/account/",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"account",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one Funding Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Got Account successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Account');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.name\", \"Test Checking\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.status\", \"APPROVED\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.bankAccountType\", \"CHECKING\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.id._\", pm.environment.get(\"FundingAccountid\"));",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/account/{{FundingAccountid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"account",
						"{{FundingAccountid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get Funding Accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Accounts.Account.length] = true;",
							"tests[\"Got Accounts successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"Verify Accounts\"] = pm.expect(pm.response.text()).to.include('Accounts');",
							"tests[\"Verify Payee\"] = pm.expect(pm.response.text()).to.include('Account');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"//expectResponseBodyToHaveJsonProperty(\"Success.Accounts.Account.name\", \"Test Checking\");",
							"//expectResponseBodyToHaveJsonProperty(\"Success.Accounts.status\", \"APPROVED\");",
							"//expectResponseBodyToHaveJsonProperty(\"Success.Accounts.bankAccountType\", \"CHECKING\");",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/account",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"account"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Modify Funding Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b6de438e-99bd-4d1a-8f11-46c64342b728",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d51efd90-0dd7-44a9-beb3-81165ef9166f",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Modified Funding account successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.name\",pm.environment.get(\"FundingAccount\") );",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.routingNumber\", \"323075754\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.status\", \"APPROVED\");",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Account xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n        <id idDomain=\"IPE\">{{FundingAccountid}}</id>\n        <revision>2</revision>\n        <name>{{FundingAccount}}</name>\n        <nickname>{{FundingAccount}} Update</nickname>\n        <status>APPROVED</status>\n        <default>false</default>\n        <accountNumber>****6546</accountNumber>\n        <routingNumber>323075754</routingNumber>\n        <bankName>The Pacific Northwest</bankName>\n        <bankAccountType>CHECKING</bankAccountType>\n        <validate>false</validate>\n        <skipAccountValidation>true</skipAccountValidation>\n</Account>\n"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/account/",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"account",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete- Funding Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Account Deleted successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.name\", pm.environment.get(\"FundingAccount\"));",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.status\", \"INACTIVE_OR_DELETED\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.routingNumber\", \"323075754\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Account.bankAccountType\", \"CHECKING\");",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/account/{{FundingAccountid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"account",
						"{{FundingAccountid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Got Profile successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify Profile\"] = pm.expect(pm.response.text()).to.include('Profile');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Profile.billingClass\", \"505\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Profile.status\", \"ACTIVE\");",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/profile",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"profile"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get DataChanges",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Got datachanges successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify DataChange\"] = pm.expect(pm.response.text()).to.include('DataChanges');",
							"tests[\"Verify Date\"] = pm.expect(pm.response.text()).to.include('entityModified');",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "intuit_tid",
						"value": "tcmspringboottesting1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/datachange",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"datachange"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Categories.Category.length] = true;",
							"tests[\"Got Categories successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify Categories\"] = pm.expect(pm.response.text()).to.include('Categories');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"//expectResponseBodyToHaveJsonProperty(\"Success.Categories.Category.name[0]\", \"Personal Care\");",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "intuit_tid",
						"value": "tcmspringboottesting1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/category",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"category"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Post Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Posted Category successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Category.name\", \"sampleaddcategory\");",
							"var Categoryid = convertedData.Success.Category.id._;",
							"console.log(Categoryid)",
							"",
							"",
							"// Assigning the extracted value in to a global variable",
							"pm.environment.set(\"Categoryid\", Categoryid);",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text"
					},
					{
						"key": "intuit-subscriber-id",
						"value": "{{loginid}}",
						"type": "text"
					},
					{
						"key": "intuit_offeringid",
						"value": "BPUI",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Category xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n<name>sampleaddcategory</name>\n</Category>"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/category",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"category"
					]
				},
				"description": "This test is to post a payment"
			},
			"response": []
		},
		{
			"name": "Get single Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Got Category successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify Category\"] = pm.expect(pm.response.text()).to.include('Category');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Category.name\", \"sampleaddcategory\");",
							"",
							"",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "intuit_tid",
						"type": "text",
						"value": "tcmspringboottesting1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/category/{{Categoryid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"category",
						"{{Categoryid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Update Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Updated Category successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"expectResponseBodyToHaveJsonProperty(\"Success.Category.name\", \"sampleaddcategory update\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Category.id._\", pm.environment.get(\"Categoryid\"));",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text"
					},
					{
						"key": "intuit-subscriber-id",
						"value": "{{loginid}}",
						"type": "text"
					},
					{
						"key": "intuit_offeringid",
						"value": "BPUI",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<Category xmlns=\"http://www.intuit.com/payment/cdm/v1\">\n        <id idDomain=\"IPE\">{{Categoryid}}</id>\n        <revision>1</revision>\n        <name>sampleaddcategory update</name>\n</Category>\n"
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/category",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"category"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Category Deleted successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{GUID}}\" intuit-fiscid=\"{{loginid}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "bbs_realm_id",
						"value": "{{realmid}}",
						"type": "text"
					},
					{
						"key": "intuit-subscriber-id",
						"value": "{{loginid}}",
						"type": "text"
					},
					{
						"key": "intuit_offeringid",
						"value": "BPUI",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/category/{{Categoryid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"category",
						"{{Categoryid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bills",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"let convertedData = xml2Json(pm.response.text());",
							"tests[\"Count: \"  + convertedData.Success.Bills.Bill.length] = true;",
							"tests[\"Got Bills successfully\"] = pm.expect(pm.response.text()).to.include('Success');",
							"tests[\"Verify Bills\"] = pm.expect(pm.response.text()).to.include('Bills');",
							"tests[\"Verify id\"] = pm.expect(pm.response.text()).to.include('id');",
							"tests[\"verify metadata\"] = pm.expect(pm.response.text()).to.include('metaData');",
							"//expectResponseBodyToHaveJsonProperty(\"Success.Categories.Category.name[0]\", \"Personal Care\");",
							"",
							"",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{BILLSGUID}}\" intuit-fiscid=\"{{BILLSLOGIN}}\"",
						"type": "text"
					},
					{
						"key": "intuit_payment_app_token",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"type": "text",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"value": "PRIMARY",
						"type": "text"
					},
					{
						"key": "intuit_loginId",
						"value": "",
						"type": "text"
					},
					{
						"key": "Accept-Encoding",
						"value": "identity;q=1, *;q=0",
						"type": "text"
					},
					{
						"key": "intuit_tid",
						"value": "tcmspringboottesting1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/bill",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"bill"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		},
		{
			"name": "Get single bill",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5670c9-7aaa-489b-88b0-3ca40f27579c",
						"exec": [
							"//Load pxlib",
							"var pxlib = eval(pm.globals.get(\"pxlib\"));",
							"",
							"//Start testing using pxlib",
							"startPXTest(pm, pm.globals.get(\"useStrictValidation\"));",
							"",
							"//Validate response status code",
							"expectResponseStatusCodeToBe(200);",
							"",
							"//Validate response body",
							"",
							"expectResponseBodyToHaveJsonProperty(\"Success.Bill.id._\", \"280968\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Bill.payeeId._\", \"43864\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Bill.payeeName\", \"TEST BILLER 3\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Bill.dueAmount.currencyCode\", \"USD\");",
							"expectResponseBodyToHaveJsonProperty(\"Success.Bill.dueAmount.amount\", \"600\");",
							"",
							"//pm.test(\"Check Payee Name\", function () {",
							"//    pm.expect(convertedData.Success.Payees.Payee.name).to.equal(\"ManagePayee\");",
							"//    pm.expect(convertedData.Success.Payees.Payee.status).to.equal(\"ACTIVE\");",
							"//});",
							"",
							"//End testing using pxlib",
							"endPXTest();",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/xml"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "INTUITAUTH intuit-fiid=\"{{FIID}}\",intuit-urid=\"{{BILLSGUID}}\" intuit-fiscid=\"{{BILLSLOGIN}}\""
					},
					{
						"key": "intuit_payment_app_token",
						"type": "text",
						"value": "3696638E-45FE-4B13-97AB-73026AA91F98",
						"disabled": true
					},
					{
						"key": "intuit_payment_userType",
						"type": "text",
						"value": "PRIMARY"
					},
					{
						"key": "intuit_loginId",
						"type": "text",
						"value": ""
					},
					{
						"key": "Accept-Encoding",
						"type": "text",
						"value": "identity;q=1, *;q=0"
					},
					{
						"key": "intuit_tid",
						"type": "text",
						"value": "tcmspringboottesting1"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{bps-baseurl}}/payment/v1/realm/0/bill/{{billid}}",
					"host": [
						"{{bps-baseurl}}"
					],
					"path": [
						"payment",
						"v1",
						"realm",
						"0",
						"bill",
						"{{billid}}"
					]
				},
				"description": "This test is to get Payee details from BPS"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1d357b3a-5ac9-4dd3-b653-bb297f3e9a4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "024687ed-8aa2-47d6-bafc-219628de0c0f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}